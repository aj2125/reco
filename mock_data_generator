import pandas as pd
import random
from datetime import datetime, timedelta

# Load reference tables
marginals_df = pd.read_csv('marginals.csv')
transitions_df = pd.read_csv('transitions.csv')
cooccurrence_df = pd.read_csv('cooccurrence.csv')
weights_df = pd.read_csv('event_weights.csv')
ymmt_df = pd.read_csv('ymmt.csv')

# Build dicts
marginals = marginals_df.set_index('event_type')['marginal_prob'].to_dict()
transitions = {}
for _, row in transitions_df.iterrows():
    transitions.setdefault(row['from_event'], {})[row['to_event']] = row['probability']
cooccurs = {}
for _, row in cooccurrence_df.iterrows():
    cooccurs.setdefault(row['event'], []).append((row['co_event'], row['probability']))
weights = weights_df.set_index('event_type')['weight'].to_dict()

# Config
NUM_USERS = 100
SESSIONS_PER_USER = 2
OUTPUT_PATH = 'mock_events.csv'

records = []
for u in range(1, NUM_USERS+1):
    user = f'U{u:03d}'
    for s in range(SESSIONS_PER_USER):
        # Session start: sample first event by marginal
        events = list(marginals.keys())
        probs = list(marginals.values())
        event = random.choices(events, probs)[0]
        prev_event = event
        timestamp = datetime.now() - timedelta(hours=random.uniform(0, 168))
        # Emit first event
        seq = [event]
        # Then follow transitions
        while prev_event in transitions and transitions[prev_event]:
            next_events = list(transitions[prev_event].keys())
            next_probs = list(transitions[prev_event].values())
            event = random.choices(next_events, next_probs)[0]
            seq.append(event)
            prev_event = event
        # Build records with co-occurrence
        for ev in seq:
            rec = {'user_id': user, 'event_type': ev, 'timestamp': timestamp}
            # Apply co-occurrence
            if ev in cooccurs:
                for co_ev, p in cooccurs[ev]:
                    if random.random() < p:
                        seq.insert(seq.index(ev)+1, co_ev)
            # Attach metadata
            defn = {'fields': [], 'weight': weights.get(ev, 0)}
            if ev in weights:
                defn['weight'] = weights[ev]
            if any(f in defn['fields'] for f in ['year','make','model','trim']):
                vehicle = ymmt_df.sample(1).iloc[0]
                rec.update(vehicle.to_dict())
                rec['condition'] = random.choice(['New','Used'])
            rec['weight'] = defn['weight']
            records.append(rec)
            timestamp += timedelta(minutes=random.randint(1,10))

pd.DataFrame(records).to_csv(OUTPUT_PATH, index=False)
print(f'Generated {len(records)} events to {OUTPUT_PATH}')
