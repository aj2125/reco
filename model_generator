import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import xgboost as xgb
import joblib

df = pd.read_csv('mock_events.csv')
# Encode user/item
df['vehicle_id'] = df['make'] + '_' + df['model'] + '_' + df['trim'] + '_' + df.get('year',0).astype(str)
le_u = LabelEncoder().fit(df['user_id'])
le_i = LabelEncoder().fit(df['vehicle_id'])
df['u_idx'] = le_u.transform(df['user_id'])
df['i_idx'] = le_i.transform(df['vehicle_id'])
# Aggregate
agg = df.groupby(['u_idx','i_idx']).agg(weight_sum=('weight','sum'),
                                       weight_max=('weight','max')).reset_index()
X = agg[['u_idx','i_idx','weight_sum','weight_max']]
y = (agg['weight_max']>0.5).astype(int)
X_train,X_val,y_train,y_val = train_test_split(X,y,test_size=0.2,random_state=42)
dtrain = xgb.DMatrix(X_train, label=y_train)
dval = xgb.DMatrix(X_val, label=y_val)
bst = xgb.train({'objective':'binary:logistic','eval_metric':'auc'}, dtrain, 20, [(dval,'val')])
bst.save_model('model.xgb')
joblib.dump({'le_u':le_u,'le_i':le_i}, 'encoders.pkl')
print('Model trained.')
